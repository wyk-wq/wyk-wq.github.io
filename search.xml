<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="/2024/01/26/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/26/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="js中数组的相关操作"><a href="#js中数组的相关操作" class="headerlink" title="js中数组的相关操作"></a>js中数组的相关操作</h1><p>JavaScript 数组对象提供了大量的方法来操作数组。以下是一些常见的方法：</p><ol><li><p><code>push()</code>: 向数组的末尾添加一个或更多元素，并返回新的长度。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);  <span class="comment">// arr is now [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>pop()</code>: 删除并返回数组的最后一个元素。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> last = arr.<span class="title function_">pop</span>();  <span class="comment">// last is 3, arr is now [1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p><code>shift()</code>: 删除并返回数组的第一个元素。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> first = arr.<span class="title function_">shift</span>();  <span class="comment">// first is 1, arr is now [2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>unshift()</code>: 向数组的开头添加一个或更多元素，并返回新的长度。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>);  <span class="comment">// arr is now [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>concat()</code>: 用于连接两个或多个数组。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr1.<span class="title function_">concat</span>(arr2);  <span class="comment">// arr3 is [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li><li><p><code>join()</code>: 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);  <span class="comment">// str is &#x27;Hello world&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>: 从某个已有的数组返回选定的元素。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> subArr = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// subArr is [2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>splice()</code>: 删除元素，并向数组添加新元素。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;three&#x27;</span>);  <span class="comment">// arr is [1, 2, &#x27;three&#x27;, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>sort()</code>: 对数组的元素进行排序。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>();  <span class="comment">// arr is [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>reverse()</code>: 颠倒数组中元素的顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();  <span class="comment">// arr is [3, 2, 1]</span></span><br></pre></td></tr></table></figure></li><li><p><code>map()</code>: 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);  <span class="comment">// newArr is [2, 4, 6]</span></span><br></pre></td></tr></table></figure></li><li><p><code>filter()</code>: 创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">3</span>);  <span class="comment">// newArr is [4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>reduce()</code>: 对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, value</span>) =&gt;</span> total + value, <span class="number">0</span>);  <span class="comment">// sum is 15</span></span><br></pre></td></tr></table></figure></li><li><p><code>forEach()</code>: 对数组的每个元素执行一次提供的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));  <span class="comment">// logs 1, 2, 3</span></span><br></pre></td></tr></table></figure></li><li><p><code>find()</code>: 返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> found = arr.<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">3</span>);  <span class="comment">// found is 4</span></span><br></pre></td></tr></table></figure></li><li><p><code>findIndex()</code>: 返回数组中满足提供的测试函数的第一个元素的索引。否则返回 -1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> foundIndex = arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">3</span>);  <span class="comment">// foundIndex is 3</span></span><br></pre></td></tr></table></figure></li><li><p><code>every()</code>: 测试数组的所有元素是否都通过了指定函数的测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> allPositive = arr.<span class="title function_">every</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">0</span>);  <span class="comment">// allPositive is true</span></span><br></pre></td></tr></table></figure></li><li><p><code>some()</code>: 测试数组中是否有元素通过了指定函数的测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> anyNegative = arr.<span class="title function_">some</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">0</span>);  <span class="comment">// anyNegative is false</span></span><br></pre></td></tr></table></figure></li></ol><p>这只是 JavaScript 数组方法的一部分，还有更多的方法，如 <code>includes()</code>, <code>indexOf()</code>, <code>lastIndexOf()</code>, <code>fill()</code>, <code>from()</code>, <code>isArray()</code>, <code>of()</code> 等等。你可以查阅 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN Web 文档</a> 来获取更多信息和详细的使用示例。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora的常用快捷键</title>
      <link href="/2024/01/26/Typora%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2024/01/26/Typora%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Typora-常用快捷键："><a href="#Typora-常用快捷键：" class="headerlink" title="Typora 常用快捷键："></a>Typora 常用快捷键：</h3><ol><li><p>切换编辑语法模式&#x2F;预览模式： <code>Ctrl + /</code></p></li><li><p>标题：</p><ul><li>一级标题：<code># + 空格 + 标题内容</code></li><li>二级标题：<code>## + 空格 + 标题内容</code></li><li>…</li><li>六级标题：<code>###### + 空格 + 标题内容</code></li></ul></li><li><p>粗体：<code>Ctrl + B</code></p></li><li><p>斜体：<code>Ctrl + I</code></p></li><li><p>表格：<code>Ctrl + T</code></p></li><li><p>代码块：&#96;&#96;&#96; + Enter</p></li><li><p>引用：<code>&gt; + 空格</code></p></li><li><p>转义字符：<code>\ + 字符</code></p></li><li><p>无序列表：<code>- + 空格</code> 或 <code>* + 空格</code></p></li><li><p>有序列表：<code>数字 + . + 空格</code></p></li><li><p>生成目录：<code>[TOC] + Enter</code></p></li><li><p>选中一整行：<code>Ctrl + L</code></p></li><li><p>选中单词：<code>Ctrl + D</code></p></li><li><p>选中相同格式的文字：<code>Ctrl + E</code></p></li><li><p>跳转到文章开头：<code>Ctrl + Home</code></p></li><li><p>跳转到文章结尾：<code>Ctrl + End</code></p></li><li><p>搜索：<code>Ctrl + F</code></p></li><li><p>替换：<code>Ctrl + H</code></p></li><li><p>插入链接：<code>Ctrl + K</code></p></li><li><p>数学公式：<code>$ + Enter</code></p></li><li><p>表情：<code>: + 单词 + :</code></p></li><li><p>插入图片：直接拖动到指定位置或 <code>Ctrl + Shift + I</code></p></li></ol><h3 id="Typora-常用格式及操作："><a href="#Typora-常用格式及操作：" class="headerlink" title="Typora 常用格式及操作："></a>Typora 常用格式及操作：</h3><ol><li>删除线：<code>Alt + Shift + 5</code> 或 <code>~~内容~~</code></li><li>下标：<code>&lt;sub&gt;内容&lt;/sub&gt;</code></li><li>上标：<code>&lt;sup&gt;内容&lt;/sup&gt;</code></li><li>脚注：<code>[+^+脚注]</code></li><li>高亮：<code>==内容==</code></li><li>着重：<code>Ctrl + Shift + \</code></li><li>淡化：<code>+内容+</code></li><li>转义：<code>\ + 符号</code></li><li>清除格式：<code>Ctrl + \</code></li><li>居中：<code>&lt;center&gt; + 居中内容 + &lt;center&gt;</code></li><li>右对齐：<code>&lt;p align=“right”&gt;右对齐&lt;/p&gt;</code></li><li>左对齐：<code>&lt;p align=“left”&gt;左对齐&lt;/p&gt;</code></li><li>换行：回车或 <code>&lt;br/&gt;</code></li><li>空格（一个汉字俩空格）：<code> </code> (一个空格) 或 <code> </code> (两个空格）</li></ol><h3 id="Typora-常用操作："><a href="#Typora-常用操作：" class="headerlink" title="Typora 常用操作："></a>Typora 常用操作：</h3><ol><li>新建：<code>Ctrl + N</code></li><li>新建窗口：<code>Ctrl + Shift + N</code></li><li>打开：<code>Ctrl + O</code></li><li>保存：<code>Ctrl + S</code></li><li>另存为：<code>Ctrl + Shift + S</code></li><li>关闭：<code>Ctrl + W</code></li><li>撤销：<code>Ctrl + Z</code></li><li>重做：<code>Ctrl + Y</code></li><li>复制为 MarkDown：<code>Ctrl + Shift + C</code></li><li>粘贴为纯文本：<code>Ctrl + Shift + V</code></li><li>选中当前行&#x2F;句：<code>Ctrl + L</code></li><li>选中当前格式文本：<code>Ctrl + E</code></li><li>选中当前词：<code>Ctrl + D</code></li><li>跳转到文首：<code>Ctrl + Home</code></li><li>跳转到文末：<code>Ctrl + End</code></li><li>查找：<code>Ctrl + F</code></li><li>替换：<code>Ctrl + H</code></li><li>大纲视图：<code>Ctrl + Shift + 1</code></li><li>文档列表视图：<code>Ctrl + Shift + 2</code></li><li>文件树视图：<code>Ctrl + Shift + 3</code></li><li>显示&#x2F;隐藏侧边栏：<code>Ctrl + Shift + L</code></li><li>源代码模式：<code>Ctrl + /</code></li><li>专注模式：<code>F8</code></li><li>打字机模式：<code>F9</code></li><li>切换全屏：<code>F11</code></li><li>实际大小：<code>Ctrl + Shift + 0</code></li><li>放大&#x2F;缩小：<code>Ctrl + Shift + +</code> &#x2F; <code>Ctrl + Shift + -</code></li><li>应用内窗口切换：<code>Ctrl + Tab</code></li><li>打开 DevTools：<code>Shift + F12</code></li></ol><h3 id="Typora-导出文件："><a href="#Typora-导出文件：" class="headerlink" title="Typora 导出文件："></a>Typora 导出文件：</h3><ol><li>文件 → 导出 → 选择要导出文件的格式</li></ol><p>请根据需要整理和使用上述快捷键和操作。希望这份整理对您有帮助！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo从零基础开始搭建自己的博客网站.</title>
      <link href="/2024/01/23/hexo%E4%BB%8E%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2024/01/23/hexo%E4%BB%8E%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>meta(name&#x3D;”referrer” content&#x3D;”no-referrer”)</p><h1 id="Hexo搭建博客教程"><a href="#Hexo搭建博客教程" class="headerlink" title="Hexo搭建博客教程"></a>Hexo搭建博客教程</h1><p>本文参考了唐志远大佬的文章基础上进行编写的。大佬的博客地址是<a href="https://fe32.top/">唐志远</a></p><h2 id="1-搭建之前的必要准备"><a href="#1-搭建之前的必要准备" class="headerlink" title="1.搭建之前的必要准备"></a>1.搭建之前的必要准备</h2><h3 id="1-1安装nodejs环境"><a href="#1-1安装nodejs环境" class="headerlink" title="1.1安装nodejs环境"></a>1.1安装nodejs环境</h3><p>​（1）下载地址是：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> ，下载安装即可，建议选择稳定版本。</p><p>​（2）安装成功之后。cmd打开窗口，然后执行node -v命令，看到版本信息，则说明安装成功。</p><p>​（3）修改下载源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="1-2安装-Hexo"><a href="#1-2安装-Hexo" class="headerlink" title="1.2安装 Hexo"></a>1.2安装 Hexo</h3><p>在目标路径打开CMD窗口，输入npm install -g hexo-cli安装Hexo环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完后输入hexo -v验证是否安装成功。</p><p><img src="https://gitee.com/wyk_qkh/pic-note-img/raw/master/img/image-20240124162642207.png" alt="成功截图"></p><h3 id="1-3注册-GitHub-帐号"><a href="#1-3注册-GitHub-帐号" class="headerlink" title="1.3注册 GitHub 帐号"></a>1.3注册 GitHub 帐号</h3><p>按照提示一步步注册即可，创建好账号之后</p><p>（1）创建 GitHub 仓库</p><p>点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库。这里千万注意选择你的用户名为前缀。</p><ul><li>仓库的格式必须为：&lt;用户名&gt;.github.io</li><li>Description：为描述仓库（选填）</li><li>勾选 Initialize this repository with a README 初始化一个 README.md 文件</li><li>点击 Creat repository 进行创建</li></ul><h3 id="1-4Git安装-连接Github"><a href="#1-4Git安装-连接Github" class="headerlink" title="1.4Git安装 &amp;&amp; 连接Github"></a>1.4Git安装 &amp;&amp; 连接Github</h3><p>（1）进入官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ，由于官网下载太慢可以通过淘宝的开源镜像下载 网址：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/</a> ，下载版本更具自己的需求选择即可。</p><p>（2）下载后傻瓜式安装Git即可，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;Git】，也可以自定义路径。<br>（3）点击电脑左下角开始即可看见Git Bash。</p><p>（4）打开Git Bash后如下图所示即代表安装完成</p><p><img src="https://gitee.com/wyk_qkh/pic-note-img/raw/master/img/image-20240124165921234.png" alt="image-20240124165921234"></p><h3 id="1-5连接Github"><a href="#1-5连接Github" class="headerlink" title="1.5连接Github"></a>1.5连接Github</h3><p>（1）生成ssh公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub,如果不知道地址的话，可以使用Everything<a href="https://www.voidtools.com/zh-cn/downloads/">下载 - voidtools</a>进行高效搜索，确定位置。</p><p>用记事本打开上述图片中的公钥（id_rsa.pub），复制里面的内容，然后开始在github中配置ssh密钥。</p><p>（2）将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，</p><blockquote><p>注意: 要是有【Key type】的选择项 ，选择默认Authentication Key 即可。</p></blockquote><p>测试连接，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现如下信息，说明已经大功告成！</p><p><img src="https://gitee.com/wyk_qkh/pic-note-img/raw/master/img/image-20240124170517615.png"></p><h2 id="2-初始化-Hexo-项目"><a href="#2-初始化-Hexo-项目" class="headerlink" title="2.初始化 Hexo 项目"></a>2.初始化 Hexo 项目</h2><p>(1)在目标路径（我这里选的路径为【D:\blog】）打开cmd命令窗口，执行hexo init初始化项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog-demo(项目名)</span><br></pre></td></tr></table></figure><p>(2)进入blog-demo ，输入npm i安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog-demo  //进入blog-demo文件夹</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>(3)输入hexo server或者hexo s。在本地启动运行该项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>(4)打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功了</p><p><img src="https://gitee.com/wyk_qkh/pic-note-img/raw/master/img/image-20240124170914847.png"></p><p>(5)将静态博客挂载到 GitHub Pages<br>安装 hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改 项目更目录下的 _config.yml 文件</p><p>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。</p><p>修改最后一行的配置，将repository修改为你自己的github项目地址即可。</p><blockquote><p>请检查自己的默认分支是不是master。如果是main，则需要配置文件中改为main</p></blockquote><p><img src="https://gitee.com/wyk_qkh/pic-note-img/raw/master/img/image-20240124171312308.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">你的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（6）部署项目到 GitHub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里要注意的是，后文中提到安装了一个搜索功能，用到的Algolia，所以在部署到服务器之前需要先执行一下，hexo algolia创建一下索引并上传。</p></blockquote><p>本文中搜索功能采用的是Algolia，详细的配置教程请看<a href="https://fe32.top/articles/hexo1607/">配置搜索</a></p><p>（7）最后执行 hexo deploy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>注意：deploy时可能要你输入 username 和 password。</p></blockquote><p>如果出现Deploy done，则说明部署成功了。</p><p>打开浏览器访问：https:&#x2F;&#x2F;你的用户名.github.io ，这时候我们就可以看到博客内容了。</p><p>（8）设置个人域名（可选）</p><p>准备好你的域名</p><p>![屏幕截图 2024-01-24 172048](<a href="https://gitee.com/wyk_qkh/pic-note-img/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://gitee.com/wyk_qkh/pic-note-img/raw/master/img/屏幕截图</a> 2024-01-24 172048.png)</p><h1 id="hexo的常见命令"><a href="#hexo的常见命令" class="headerlink" title="hexo的常见命令"></a>hexo的常见命令</h1><h2 id="1-init命令"><a href="#1-init命令" class="headerlink" title="1.init命令"></a>1.init命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、<a href="https://pnpm.io/zh/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/zh-cn/docs/index.html#%E5%AE%89%E8%A3%85-Node-js">Node.js</a> 安装。</li></ol><h2 id="2-文章的书写"><a href="#2-文章的书写" class="headerlink" title="2.文章的书写"></a>2.文章的书写</h2><h3 id="2-1new"><a href="#2-1new" class="headerlink" title="2.1new"></a>2.1new</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>eg: <code>hexo new &quot;post title with whitespace&quot;</code> 其中 layout为_config.yml中的默认参数值。即：default_layout: post</p><ul><li><code>-p --path</code> 自定义新文章</li><li><code>-r --replace</code> 存在同名文章，替换</li><li><code>-s --slug</code> 文章的slug，作为新文章的文件名和发布后的URL</li></ul><p>eg： <code>hexo new page --path about/me &quot;About me&quot;</code></p><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;post title with whitespace&quot;</span></span><br></pre></td></tr></table></figure><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me <span class="string">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h3 id="2-2generate"><a href="#2-2generate" class="headerlink" title="2.2generate"></a>2.2generate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="2-3publish"><a href="#2-3publish" class="headerlink" title="2.3publish"></a>2.3publish</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h3 id="2-4server"><a href="#2-4server" class="headerlink" title="2.4server"></a>2.4server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="2-5deploy"><a href="#2-5deploy" class="headerlink" title="2.5deploy"></a>2.5deploy</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="2-6render"><a href="#2-6render" class="headerlink" title="2.6render"></a>2.6render</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h3 id="2-7migrate"><a href="#2-7migrate" class="headerlink" title="2.7migrate"></a>2.7migrate</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h3 id="2-8clean"><a href="#2-8clean" class="headerlink" title="2.8clean"></a>2.8clean</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="2-9list"><a href="#2-9list" class="headerlink" title="2.9list"></a>2.9list</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站数据。</p><h3 id="2-10version"><a href="#2-10version" class="headerlink" title="2.10version"></a>2.10version</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="3-迁移"><a href="#3-迁移" class="headerlink" title="3.迁移"></a>3.迁移</h2><h3 id="3-1RSS"><a href="#3-1RSS" class="headerlink" title="3.1RSS"></a>3.1RSS</h3><p>首先，安装 <code>hexo-migrator-rss</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-rss --save</span><br></pre></td></tr></table></figure><p>插件安装完成后，执行下列命令，从 RSS 迁移所有文章。<code>source</code> 可以是文件路径或网址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate rss &lt;source&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2Jekyll"><a href="#3-2Jekyll" class="headerlink" title="3.2Jekyll"></a>3.2Jekyll</h3><p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在 <code>_config.yml</code> 中修改 <code>new_post_name</code> 参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h3 id="3-3Octopress"><a href="#3-3Octopress" class="headerlink" title="3.3Octopress"></a>3.3Octopress</h3><p>把 Octopress <code>source/_posts</code> 文件夹内的所有文件转移到 Hexo 的 <code>source/_posts</code> 文件夹，并修改 <code>_config.yml</code> 中的 <code>new_post_name</code> 参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h3 id="3-4WordPress"><a href="#3-4WordPress" class="headerlink" title="3.4WordPress"></a>3.4WordPress</h3><p>首先，安装 <code>hexo-migrator-wordpress</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure><p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="https://wordpress.com/zh-cn/support/export/">WP支持页面</a>）。</p><p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 WordPress 导出的文件路径或网址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate wordpress &lt;source&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见<a href="https://hexo.io/zh-cn/docs/front-matter#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE">Front-matter中的分类与标签</a>）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。</p></blockquote><h3 id="3-5Joomla"><a href="#3-5Joomla" class="headerlink" title="3.5Joomla"></a>3.5Joomla</h3><p>首先，安装 <code>hexo-migrator-joomla</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-joomla --save</span><br></pre></td></tr></table></figure><p>使用 <a href="http://extensions.joomla.org/extensions/migration-a-conversion/data-import-a-export/12816?qh=YToxOntpOjA7czo1OiJqMnhtbCI7fQ==">J2XML</a> 组件导出 Joomla 文章。<br>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 Joomla 导出的文件路径或网址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate joomla &lt;source&gt;</span><br></pre></td></tr></table></figure><h2 id="新建博客文件"><a href="#新建博客文件" class="headerlink" title="新建博客文件"></a>新建博客文件</h2><p>博客文件格式为<code>.md</code>（Markdown格式文件，建议使用 <a href="https://www.typora.io/">typora软件</a>进行编辑）。我们一定要用代码建立新的博客 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n 文件名</span><br></pre></td></tr></table></figure><p>写好内容后，在命令行一键三连：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>然后随便打开一个浏览器，在网址栏输入<code>localhost:4000/</code>，就能发现自己的网站更新了！不过这只是在本地进行了更新，要想部署到网上（Github上），输入如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后在浏览器地址栏输入<code>https://yourname.github.io</code>，或者<code>yourname.github.io</code>就能在网上浏览自己的博客了！</p><p>以上，我们的博客网站1.0版本就搭建完成了，如果没有更多的需求，做到这里基本上就可以了。如果有更多的要求，还需要进一步的精耕细作！</p><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><ol><li>分类</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>会出现<code>source/categories/index.md</code>文件</p><ol><li>标签</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>会出现<code>source/tags/index.md</code>文件：</p><h1 id="Hexo-下-Markdown-的配置与学习"><a href="#Hexo-下-Markdown-的配置与学习" class="headerlink" title="Hexo 下 Markdown 的配置与学习"></a>Hexo 下 Markdown 的配置与学习</h1><p>本篇</p><ol><li>更换 Hexo 下的 Markdown 渲染插件</li><li>学习 Markdown 基本语法</li></ol><hr><h2 id="更换-Markdown-渲染插件"><a href="#更换-Markdown-渲染插件" class="headerlink" title="更换 Markdown 渲染插件"></a>更换 Markdown 渲染插件</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Hexo 内置的默认渲染插件是 <code>hexo-renderer-marked</code>，缺少很多功能，比如 GFM (GitHub Flavored Markdown)、上下标、脚注、emoji 等</p><h3 id="hexo-renderer-markdown-it-插件"><a href="#hexo-renderer-markdown-it-插件" class="headerlink" title="hexo-renderer-markdown-it 插件"></a>hexo-renderer-markdown-it 插件</h3><p><code>hexo-renderer-markdown-it</code> 插件支持大量扩展功能，可以实现 Hexo 博客的 footnote 功能。</p><p><a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a></p><h3 id="安装，配置插件"><a href="#安装，配置插件" class="headerlink" title="安装，配置插件"></a>安装，配置插件</h3><p>参考 <a href="https://github.com/hexojs/hexo-renderer-markdown-it/wiki">Wiki 文档</a></p><p>先卸载原有的 <code>hexo-renderer-marked</code> 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm un hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><p>安装 <code>hexo-renderer-markdown-it</code> 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><p>使用 <code>Advanced configuration</code>，向 <code>站点配置文件</code> 添加</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Markdown-it config</span><br><span class="line">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span><br><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    html: true</span><br><span class="line">    xhtmlOut: false</span><br><span class="line">    breaks: true</span><br><span class="line">    linkify: true</span><br><span class="line">    typographer: true</span><br><span class="line">    quotes: &#x27;“”‘’&#x27;</span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-ins</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: &#x27;v&#x27;</span><br><span class="line">    permalink: true</span><br><span class="line">    permalinkClass: header-anchor</span><br><span class="line">    permalinkSymbol: ¶</span><br></pre></td></tr></table></figure><h2 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h2><h3 id="文章头基本格式"><a href="#文章头基本格式" class="headerlink" title="文章头基本格式"></a>文章头基本格式</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 如何搭建个人博客网站(二)</span><br><span class="line">date: 2019-04-13 23:46:39</span><br><span class="line">tags:</span><br><span class="line">  - tutorial</span><br><span class="line">  - github</span><br><span class="line">  - hexo</span><br><span class="line">categories: 教程</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br></pre></td></tr></table></figure><p>渲染效果：这是 <em>斜体</em>，这是 <strong>粗体</strong></p><h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><p>格式一：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure><p>格式二：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># H1</span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在单独的一行使用 <code>***</code> 或者 <code>---</code> 表示分割线</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~应该不经常用~~</span><br></pre></td></tr></table></figure><p>渲染效果：应该不经常用</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ul><li><p>插入文字超链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[显示文字](链接地址)</span><br></pre></td></tr></table></figure></li><li><p>插入图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](图片地址)</span><br></pre></td></tr></table></figure></li><li><p>插入音频，使用插件 <code>hexo-tag-aplayer</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xx%, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><p>具体使用方法参考：<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md#%E4%BD%BF%E7%94%A8">hexo-tag-aplayer 使用文档</a></p></li><li><p>插入视频，使用 <code>iframe</code> 代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/js/youtube-autoresizer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;视频链接&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></li></ul><iframe width="800" height="450" src="http://player.youku.com/embed/XNjcyMDU4Njg0" frameborder="0" allowfullscreen="" style="width: 1052.8px; height: 592.188px; top: 0px; left: 0px;"></iframe><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p><code>\</code> 后面的文字解析为纯文本格式，用来显示特殊符号。</p><p>例如：<br>## 不会解析为标题</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>使用 <code>&gt;</code> 来显示文字引用</p><p>渲染效果：</p><blockquote><p>世界上只有一种真正的英雄主义，那就是在认识生活的真相后依然热爱生活。</p></blockquote><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>使用 <code>[^1]</code> <code>[^1]:</code> 的脚注对来表示（<code>1</code> 只是标识，用其他字符也行，但要相对应）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Here is a footnote reference.[^note]</span><br><span class="line">[^note]: Here is the footnote.</span><br></pre></td></tr></table></figure><p>Here is a footnote reference.[<a href="https://jozeou.github.io/2019/04/14/hexo/hexo-md/#fn1">1]</a></p><h3 id="列表与表格"><a href="#列表与表格" class="headerlink" title="列表与表格"></a>列表与表格</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用 <code>*</code> <code>+</code> <code>-</code> 表示无序列表</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ 无序列表项 一</span><br><span class="line">- 子无序列表 一</span><br><span class="line">- 子无序列表 二</span><br><span class="line">* 子无序列表 三</span><br><span class="line">+ 无序列表项 二</span><br><span class="line">+ 无序列表项 三</span><br></pre></td></tr></table></figure><p>渲染效果：</p><ul><li>无序列表项 一<ul><li>子无序列表项 一</li><li>子无序列表项 二<ul><li>子子无序列表项 一</li></ul></li></ul></li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>使用 数字 和 <code>.</code> 表示有序列表</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表项 一</span><br><span class="line">1. 子有序列表项 一</span><br><span class="line">2. 子有序列表项 二</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三</span><br></pre></td></tr></table></figure><p>渲染效果：</p><ol><li>有序列表项 一</li><li>子有序列表项 一</li><li>子有序列表项 二</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>绘制表格格式如下，<code>|</code> 控制分列，<code>-</code> 控制分行，<code>:</code> 控制对齐方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| SID | Name | grade |</span><br><span class="line">| :-- | ---: | :---: |</span><br><span class="line">| 001 | Bob  |  65   |</span><br><span class="line">| 002 | Andy |  80   |</span><br><span class="line">| 003 | John |  77   |</span><br></pre></td></tr></table></figure><p>渲染效果:</p><table><thead><tr><th align="left">SID</th><th align="right">Name</th><th align="center">grade</th></tr></thead><tbody><tr><td align="left">001</td><td align="right">Bob</td><td align="center">65</td></tr><tr><td align="left">002</td><td align="right">Andy</td><td align="center">80</td></tr><tr><td align="left">003</td><td align="right">John</td><td align="center">77</td></tr></tbody></table><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="行内代码块"><a href="#行内代码块" class="headerlink" title="行内代码块"></a>行内代码块</h4><p>使用 <code>codes</code> 表示行内代码块</p><h4 id="多行代码块"><a href="#多行代码块" class="headerlink" title="多行代码块"></a>多行代码块</h4><p>将代码块置于两个 <code>中间（可在第一个</code> 后面指定代码所属的编程语言）</p><p>支持多种编程语言的语法高亮的显示，行号显示</p><p>非代码示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a code block.</span><br></pre></td></tr></table></figure><p>c++ 示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
